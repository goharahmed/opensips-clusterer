#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=16

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no

listen=udp:192.168.1.246:5060   # CUSTOMIZE ME
listen=bin:192.168.1.246:5555
listen=tcp:192.168.1.246:5060  # CUSTOMIZE ME dnl


#listen=tls:127.0.0.1:5061  # CUSTOMIZE ME dnl

####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

  #### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME


#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "received_avp", "$avp(received_nh)")/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db|uri", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")

#### ALIAS module
loadmodule "alias_db.so"
modparam("alias_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc|uri", "use_domain", 1)

#### PRESENCE modules
loadmodule "xcap.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
modparam("xcap|presence", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
modparam("presence_xml", "force_active", 1)
modparam("presence", "server_address", "sip:127.0.0.1:5060") # CUSTOMIZE ME

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

####  NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
modparam("nathelper", "sipping_from", "sip:pinger@127.0.0.1") #CUSTOMIZE ME
modparam("nathelper", "received_avp", "$avp(received_nh)")

loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:localhost:12221") # CUSTOMIZE ME

####  DYNAMMIC ROUTING module
loadmodule "drouting.so"
modparam("drouting", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so" 
loadmodule "proto_bin.so"
loadmodule "event_routing.so"
loadmodule "event_route.so"
loadmodule "cachedb_redis.so"
modparam("cachedb_redis", "cachedb_url","redis:group1://localhost:6379/")

loadmodule "clusterer.so"
modparam("clusterer", "db_mode", 0)
modparam("clusterer", "current_id", 1)
modparam("clusterer", "current_info", "cluster_id=1, url=bin:192.168.1.246:5555")
modparam("clusterer", "neighbor_info", "cluster_id=1,node_id=2,url=bin:192.168.1.245:5555")


#loadmodule "proto_tls.so"
#loadmodule "tls_mgm.so"
#modparam("tls_mgm","verify_cert", "1")
#modparam("tls_mgm","require_cert", "0")
#modparam("tls_mgm","tls_method", "TLSv1")
#modparam("tls_mgm","certificate", "/usr/local/etc/opensips/tls/user/user-cert.pem")
#modparam("tls_mgm","private_key", "/usr/local/etc/opensips/tls/user/user-privkey.pem")
#modparam("tls_mgm","ca_list", "/usr/local/etc/opensips/tls/user/user-calist.pem")

loadmodule "permissions.so"
modparam("permissions", "db_url",  "mysql://opensips:opensipsrw@localhost/opensips")
#modparam("permissions", "partition", "clustered: db_url=mysql://opensips:opensipsrw@localhost/opensips";)

####### Routing Logic ########

# main request routing logic

route{
	$avp(localip) = "192.168.1.246";

	route(SECURITY_CHECK);

	route(NAT_DETECTION);

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	route(IN_DIALOG);

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	route(PROXY_AUTH);

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR","Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		# create dialog with timeout
		if ( !create_dialog("B") ) {
			send_reply("500","Internal Server Error");
			exit;
		}
		do_accounting("db");
	}

	route(OUTBOUND);
	
	# requests for my domain
	
	if( is_method("PUBLISH|SUBSCRIBE"))
			route(handle_presence);

	route(REGISTRAR);

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	
	# apply DB based aliases
	alias_db_lookup("dbaliases");

	if ($rU=~"^\+[1-9][0-9]+$") {
		
		if (!do_routing("0")) {
			send_reply("500","No PSTN Route found");
			exit;
		}
		
		route(relay);
		exit;
	}
	 

	route(LOCATION);

	if (isbflagset(NAT)) setflag(NAT);

	# when routing via usrloc, log the missed calls also
	do_accounting("db","missed");
	
	route(relay);
}

route[LOCATION]{
	# do lookup with method filtering
	if (!lookup("location","m")) {
		if(!is_present_hf("X-LOOP-FLAG")){
			route(CLUSTER_QUERY_USER);
			$avp(filter) = "tag=" + $avp(tag);	
			async(wait_for_event("E_CLUSTERER_RPL_RECEIVED", "$avp(filter)", "5"), REMOTE_LOCATION);
		}else{
			xlog("L_WARN","[LOCATION] Loop Detected for Inter-Proxy User Lookup. User Gone Away possibly! Remove Redis-Entry for User: $ru please! \n");
			#route(VOICEMAIL);
			sl_send_reply("410","User Gone Away");
			exit;
		}
	} 
}

route[REMOTE_LOCATION]{
	xlog("[REMOTE_LOCATION] Received reply: $avp(msg)\n");
	$avp(state) = $(avp(msg){s.select,0,:});
	$avp(user) = $(avp(msg){s.select,1,:});
	$avp(remoteproxy) = $(avp(msg){s.select,2,:});
	$du = "sip:" + $avp(remoteproxy) + ":5060";
	append_hf("X-LOOP-FLAG: 1\r\n");
	route(relay);

}
route[CLUSTER_QUERY_USER]{
	$var(cl_id) = 1;
	$var(query_str) = "WHEREIS:" + $rU + ":" + $avp(localip);
	cluster_broadcast_req("$var(cl_id)", "$var(query_str)", "$avp(tag)");
	switch ($retcode) {
                case 1:
                        xlog("L_INFO","[CLUSTER_QUERY_USER] Query: $var(query_str) Transmitted successfully to at least one node\n");
                        break;
                case -1:
                        xlog("L_ERROR","[CLUSTER_QUERY_USER] State: $var(query_str) Current node is disabled so sending is impossbile");
                        break;
                case -2:
                        xlog("L_WARN","[CLUSTER_QUERY_USER] State: $var(query_str) All nodes in the cluster are unreachable according to the discovered topology\n");
                        break;
                case -3:
                        xlog("L_WARN","[CLUSTER_QUERY_USER] State: $var(query_str) Send failed for all nodes in the cluster or other OpenSIPS internal error\n");
                        break;
        };

}

route[CLUSTER_REG_SYNC]{
	$var(cl_id) = 1;
	if(!is_present_hf("Expires"))
		return;
	if($(hdr(Expires){s.int}) == 0){
		$var(shared_data) = "REGOFFLINE:" + $fU + ":" + $avp(localip);
                cache_raw_query("redis:group1","HDEL LOCAL_REGONLINE $avp(user)");
	}else{
		$var(shared_data) = "REGONLINE:" + $fU + ":" + $avp(localip);
                cache_raw_query("redis:group1","HSET LOCAL_REGONLINE $fU $avp(localip)");
	}
	cluster_broadcast_req("$var(cl_id)", "$var(shared_data)", "$avp(tag)");
	switch ($retcode) {
		case 1:
			xlog("L_INFO","[CLUSTER_REG_SYNC] State: $var(shared_data) Transmitted successfully to at least one node TAG-GENERATED:$avp(tag)\n");
			break;
		case -1:
			xlog("L_ERROR","[CLUSTER_REG_SYNC] State: $var(shared_data) Current node is disabled so sending is impossbile");
			break;
		case -2:
			xlog("L_WARN","[CLUSTER_REG_SYNC] State: $var(shared_data) All nodes in the cluster are unreachable according to the discovered topology\n");
			break;
		case -3:
			xlog("L_WARN","[CLUSTER_REG_SYNC] State: $var(shared_data) Send failed for all nodes in the cluster or other OpenSIPS internal error\n");
			break;
	};
}
route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		
		if (isflagset(NAT)) {
			rtpproxy_offer("ro");
		}

		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (isflagset(NAT)) {
		add_rr_param(";nat=yes");
		}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}


# Presence route
route[handle_presence]
{
	if (!t_newtran())
	{
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH"))
	{
		handle_publish();
	}
	else
	if( is_method("SUBSCRIBE"))
	{
		handle_subscribe();
	}

	exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	if (nat_uac_test("1"))
		fix_nated_contact();
	if ( isflagset(NAT) )
		rtpproxy_answer("ro");
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

	
	# redirect the failed to a different VM system
	if (t_check_status("486|408")) {
		$du = "sip:127.0.0.2:5060"; # CUSTOMIZE ME
		# do not set the missed call flag again
		route(relay);
	}
}

event_route[E_CLUSTERER_RPL_RECEIVED]{
        fetch_event_params("$avp(cluster_id);$avp(src_id);$avp(rcv_msg);$avp(rcv_tag)");
	$avp(state) = $(avp(rcv_msg){s.select,0,:});
        $avp(user) = $(avp(rcv_msg){s.select,1,:});
        $avp(proxy) = $(avp(rcv_msg){s.select,2,:});
        xlog("L_INFO","[CLUSTER-TALK] Replying Proxy:$avp(proxy) User: $avp(user) State: $avp(state) ClusterId: $avp(cluster_id) TAG: $avp(rcv_tag) \n");
}
event_route[E_CLUSTERER_REQ_RECEIVED]{
	fetch_event_params("$avp(cluster_id);$avp(source_id);$avp(rcv_msg);$avp(rcv_tag)");
	$avp(state) = $(avp(rcv_msg){s.select,0,:});
	$avp(user) = $(avp(rcv_msg){s.select,1,:});
	$avp(proxy) = $(avp(rcv_msg){s.select,2,:});
        xlog("L_INFO","[CLUSTER-TALK] {MSG:$avp(rcv_msg)} Sender Proxy:$avp(proxy) SRC_ID:$avp(source_id) User: $avp(user) State: $avp(state) ClusterId: $avp(cluster_id)\n");
	if($avp(state) =~ "REGOFFLINE") {
		cache_raw_query("redis:group1","HDEL REGONLINE $avp(user)");
	}else if($avp(state) =~ "REGONLINE") {
		cache_raw_query("redis:group1","HSET $avp(state) $avp(user) $avp(proxy)");
	}else if($avp(state) =~ "WHEREIS") {
		route(QUERY_LOCAL_CACHE);
	}else if($avp(state) =~ "HACKER"){
		$avp(useragent) = $avp(user);
		$avp(hacker_ip) = $avp(proxy);
		xlog("L_INFO","[CLUSTER-TALK] HACKER IP DETECTED BY CLUSTER ADDING $avp(hacker_ip) & User-Agent: $(avp(useragent){s.b64decode}) Into Watch-List\n");
		cache_raw_query("redis:group1","HSET HACKER_USERAGENT_LIST $avp(useragent) $avp(hacker_ip)");
		cache_raw_query("redis:group1","HSET HACKER_IP_LIST $avp(hacker_ip) $avp(useragent)");
	}	
	
	exit;
}

route[QUERY_LOCAL_CACHE]{
	xlog("L_INFO","[QUERY_LOCAL_CACHE] Remote Proxy: $avp(source_id) Asking if User: $avp(user) is Online Locally? USE-TAG:$avp(rcv_tag)\n");
	cache_raw_query("redis:group1","HGET LOCAL_REGONLINE $avp(user)","$avp(locationproxy)");
	if($avp(locationproxy) != NULL && $avp(locationproxy) != ''){
			xlog("L_INFO","[QUERY_LOCAL_CACHE] User:$avp(user) is Registered locally ! Atleast Redis has it online - Responding Back\n");
			$var(m_reply) = "HEREIS:" + $avp(user) + ":" + $avp(locationproxy);
			cluster_send_rpl("$avp(cluster_id)","$avp(source_id)","$var(m_reply)","$avp(rcv_tag)");
			switch ($retcode) {
				case 1:
					xlog("L_INFO","[QUERY_LOCAL_CACHE] Reply: $var(m_reply) Transmitted successfully to at least one node\n");
					break;
				case -1:
					xlog("L_ERROR","[QUERY_LOCAL_CACHE] Reply: $var(m_reply) Current node is disabled so sending is impossbile");
					break;
				case -2:
					xlog("L_WARN","[QUERY_LOCAL_CACHE] Reply: $var(m_reply) All nodes in the cluster are unreachable according to the discovered topology\n");
					break;
				case -3:
					xlog("L_WARN","[QUERY_LOCAL_CACHE] Reply: $var(m_reply) Send failed for all nodes in the cluster or other OpenSIPS internal error\n");
					break;
			};
	}
}
event_route[E_UL_AOR_DELETE]{
        fetch_event_params("$avp(aor)");
        xlog("L_INFO","[EVENT-AOR DELETE] Deleted AOR: $avp(aor) Sending Update to Cluster\n");
        $var(cl_id) = 1;
        $var(shared_data) = "REGOFFLINE:" + $(avp(aor){s.select,0,@}) + ":" + $avp(localip);
        cluster_broadcast_req("$var(cl_id)", "$var(shared_data)");
        switch ($retcode) {
                case 1:
                        xlog("L_INFO","[EVENT-AOR DELETE] State: $var(shared_data) Transmitted successfully to at least one node\n");
                        break;
                case -1:
                        xlog("L_ERROR","[EVENT-AOR DELETE] State: $var(shared_data) Current node is disabled so sending is impossbile");
                        break;
                case -2:
                        xlog("L_WARN","[EVENT-AOR DELETE] State: $var(shared_data) All nodes in the cluster are unreachable according to the discovered topology\n");
                        break;
                case -3:
                        xlog("L_WARN","[EVENT-AOR DELETE] State: $var(shared_data) Send failed for all nodes in the cluster or other OpenSIPS internal error\n");
                        break;
        };


}


local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		
		acc_db_request("200 Dialog Timeout", "acc");
		
	}
}

route[NAT_DETECTION]{
	force_rport();
	if (nat_uac_test("23")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
			setbflag(NAT);
		} else {
			fix_nated_contact();
			setflag(NAT);
		}
	}

}

route[IN_DIALOG]{
	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			if (is_method("SUBSCRIBE") && $rd == "127.0.0.1:5060") { # CUSTOMIZE ME
				# in-dialog subscribe requests
				route(handle_presence);
				exit;
			}
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			sl_send_reply("404","Not here");
			exit;
		}

		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("db","failed");
			
		}


		if (check_route_param("nat=yes")) 
			setflag(NAT);
		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}
}

route[PROXY_AUTH]{
	if (!(is_method("REGISTER")  || cluster_check_addr("1", "$si"))) {
		xlog("L_INFO","[AUTHENTICATION]{$rm} Authenticating User:$fu SourceIP:$si:$sp User-Agent:$ua\n"); 
		
		if (is_from_local())
		{
			
			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				proxy_challenge("", "0");
				exit;
			}
			if (!db_check_from()) {
				sl_send_reply("403","Forbidden auth ID");
				$avp(ua_hex) = $(ua{s.b64encode});
				cache_raw_query("redis:group1","HSET HACKER_IP_LIST $si $avp(ua_hex)");
				$avp(send_data) = "HACKER" + ":" + $avp(ua_hex) + ":" + $si  ; 
				xlog("L_INFO","[AUTHENTICATION]{$rm} Authenticating User:$fu SourceIP:$si:$sp User-Agent:$ua {HEX:$avp(ua_hex)}\n"); 
				route(CLUSTER_SHARE_DATA);
				exit;
			}
		
			consume_credentials();
			# caller authenticated
			
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_uri_host_local()) {
				send_reply("403","Rely forbidden");
				$avp(ua_hex) = $(ua{s.b64encode});
				$avp(send_data) = "HACKER" + ":" + $avp(ua_hex) + ":" + $si;
				cache_raw_query("redis:group1","HSET HACKER_IP_LIST $si $avp(ua_hex)");
				xlog("L_INFO","[AUTHENTICATION]{$rm} SHARING HACKER INFO:SourceIP:$si:$sp User-Agent:$ua {HEX:$avp(ua_hex)}\n"); 
				route(CLUSTER_SHARE_DATA);
				exit;
			}
		}

	}
}

route[OUTBOUND]{
	if (!is_uri_host_local()) {
		append_hf("P-hint: outbound\r\n"); 
		
		# if you have some interdomain connections via TLS
		## CUSTOMIZE IF NEEDED
		##if ($rd=="tls_domain1.net"
		## || $rd=="tls_domain2.net"
		##) {
		##	force_send_socket(tls:127.0.0.1:5061); # CUSTOMIZE
		##}
		
		route(relay);
	}
}

route[REGISTRAR]{
	if (is_method("REGISTER"))
	{
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber"))
		{
			www_challenge("", "0");
			exit;
		}
		if (!db_check_to()) 
		{
			sl_send_reply("403","Forbidden auth ID");
			cache_raw_query("redis:group1","HSET HACKER_IP_LIST $si $(ua{s.b64encode})");
			$avp(send_data) = "HACKER" + ":" + $si + ":" + $(ua{s.b64encode});
			route(CLUSTER_SHARE_DATA);
			exit;
		}
		if ($proto == "tcp" || $proto == "tls")
			setflag(TCP_PERSISTENT);
		if (isflagset(NAT)) {
			setbflag(SIP_PING_FLAG);
		}
		if (!save("location")){
			sl_reply_error();
			exit;
		}else{
			route(CLUSTER_REG_SYNC);
			exit;
		}
	}
}

route[SECURITY_CHECK]{
# Performs Basic User-Agent and IP Checking from Cache and report to cluster for probable Hackers - Implement more checks on your own !

	if(route(CHECK_LOCAL_CACHE)){
		if(!(cluster_check_addr("1", "$si"))){
			if( !is_from_local()) {
				if(!is_uri_host_local()){
					xlog("L_WARN","[SECURITY TEST] Unknown User:$fu Calling:$ru Source:$si:$sp User-Agent: $ua Can be a potential hacker!\n");
					cache_raw_query("redis:group1","HSET HACKER_USERAGENT_LIST $(ua{s.b64encode}) $si");
					cache_raw_query("redis:group1","HSET HACKER_IP_LIST $si $(ua{s.b64encode})");
					$avp(send_data) = "HACKER:" + $(ua{s.b64encode}) + ":" + $si;
					route(CLUSTER_SHARE_DATA);
					exit;	
				}else{
					xlog("L_INFO","[SECURITY TEST] Call from domain user:$fu to another domain user:$ru - Authentication will still be done further\n");
				}
			}else{
				xlog("L_INFO","[SECURITY TEST] Call from domain user:$fu Calling : $ru - Authentication will be done further\n");
			}
		}else{
			xlog("L_INFO","[SECURITY TEST] Cluster Box: $si:$sp making calls - Perform Hard IP-AUTH!\n");
			if(!route(CLUSTER_AUTH)){
				xlog("L_INFO","[SECURITY TEST] ALERT - $si JOINED THE CLUSTER WITHOUT PERMISSION!!\n");
			}
		}
	}else{
		xlog("L_INFO","[SECURITY TEST] IP:$si OR User-Agent:$ua Already found from Cache - Caution advised!!! \n");
	}
}
route[CHECK_LOCAL_CACHE]{

# In case cache was restarted/flushed We Should send Query to Cluster and wait for replies - Not implemented here yet.!

	cache_raw_query("redis:group1","HGET HACKER_IP_LIST $(ua{s.b64encode})","$avp(hacker_ip)");
        if($avp(hacker_ip) != NULL && $avp(hacker_ip) != ''){
		xlog("L_WARN","[SECURITY_CHECK->CHECK_LOCAL_CACHE] User-Agent:$ua IP:$si is already in the offender's List - Proceed with Caution! \n");
		return(-1);		
	}
	cache_raw_query("redis:group1","HGET HACKER_IP_LIST $si","$avp(hacker_ua)");
	if($avp(hacker_ua) != NULL && $avp(hacker_ua) != ''){
		xlog("L_WARN","[SECURITY_CHECK->CHECK_LOCAL_CACHE] IP:$si User-Agent:$(avp(hacker_ua){s.b64decode}) is already in the offender's List - Proceed with Caution! \n");
		return(-1);
        }
	return(1);
}
route[CLUSTER_AUTH]{
	if(!check_address("default:1","$si","0","$proto")) {
		return(-1);
	}
	return(1);
}

route[CLUSTER_SHARE_DATA]{
        $var(cl_id) = 1;
        $var(msg_str) = $avp(send_data);
        cluster_broadcast_req("$var(cl_id)", "$var(msg_str)", "$avp(tag)");
        switch ($retcode) {
                case 1:
                        xlog("L_INFO","[CLUSTER_SHARE_DATA] Query: $var(query_str) Transmitted successfully to at least one node\n");
                        break;
                case -1:
                        xlog("L_ERROR","[CLUSTER_SHARE_DATA] State: $var(query_str) Current node is disabled so sending is impossbile");
                        break;
                case -2:
                        xlog("L_WARN","[CLUSTER_SHARE_DATA] State: $var(query_str) All nodes in the cluster are unreachable according to the discovered topology\n");
                        break;
                case -3:
                        xlog("L_WARN","[CLUSTER_SHARE_DATA] State: $var(query_str) Send failed for all nodes in the cluster or other OpenSIPS internal error\n");
                        break;
        };

}

